# Generated by Django 4.1.7 on 2023-03-23 12:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', db_index=True, max_length=64)),
                ('description', models.TextField(blank=True, db_column='description', null=True)),
                ('phone_num', models.IntegerField(db_column='phone_num')),
                ('menu_url', models.URLField(blank=True, db_column='menu_url', null=True)),
                ('load_hour', models.TimeField(blank=True, db_column='load_hour', null=True)),
                ('create_date', models.DateField(auto_now_add=True, db_column='create_date')),
                ('views_num', models.IntegerField(db_column='views_num', default=0)),
                ('is_active', models.BooleanField(db_column='is_active', default=True)),
            ],
            options={
                'db_table': 'business',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BusinessType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', max_length=256)),
            ],
            options={
                'db_table': 'business_type',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='challenge_name', max_length=256)),
                ('date', models.DateField(blank=True, db_column='date', null=True)),
                ('challenge_time', models.TimeField(db_column='challenge_time')),
                ('text_on_challenge', models.TextField(blank=True, db_column='text_on_challenge', null=True)),
                ('is_business_challenge', models.BooleanField(db_column='is_business_challenge')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
            ],
            options={
                'db_table': 'business_challenge',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', max_length=256)),
                ('url_img', models.URLField(db_column='url_img')),
            ],
            options={
                'db_table': 'challenge_type',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='WhoToChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.BooleanField(db_column='answer')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'who_to_challenge',
            },
        ),
        migrations.CreateModel(
            name='UserViewHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_date', models.DateField(auto_now=True, db_column='view_date')),
                ('num_click', models.IntegerField(blank=True, db_column='num_click', null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_view_history',
                'ordering': ['view_date'],
            },
        ),
        migrations.CreateModel(
            name='UserLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateField(auto_now=True, db_column='add_date')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_like',
                'ordering': ['add_date'],
            },
        ),
        migrations.CreateModel(
            name='OpeningHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sun_open', models.TimeField(blank=True, db_column='sun_open', null=True)),
                ('sun_close', models.TimeField(blank=True, db_column='sun_close', null=True)),
                ('mon_open', models.TimeField(blank=True, db_column='mon_open', null=True)),
                ('mon_close', models.TimeField(blank=True, db_column='mon_close', null=True)),
                ('tues_open', models.TimeField(blank=True, db_column='tues_open', null=True)),
                ('tues_close', models.TimeField(blank=True, db_column='tues_close', null=True)),
                ('wed_open', models.TimeField(blank=True, db_column='wed_open', null=True)),
                ('wed_close', models.TimeField(blank=True, db_column='wed_close', null=True)),
                ('thurs_open', models.TimeField(blank=True, db_column='thurs_open', null=True)),
                ('thurs_close', models.TimeField(blank=True, db_column='thurs_close', null=True)),
                ('fri_open', models.TimeField(blank=True, db_column='fri_open', null=True)),
                ('fri_close', models.TimeField(blank=True, db_column='fri_close', null=True)),
                ('sat_open', models.TimeField(blank=True, db_column='sat_open', null=True)),
                ('sat_close', models.TimeField(blank=True, db_column='sat_close', null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
            ],
            options={
                'db_table': 'opening_hours',
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='challenge_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.challengetype'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BusinessChallengeDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(db_column='start_date')),
                ('end_date', models.DateField(db_column='end_date')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.challenge')),
            ],
            options={
                'db_table': 'business_challenge_details',
            },
        ),
        migrations.CreateModel(
            name='BusinessAndUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'business_and_user',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BusinessAndType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
                ('business_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.businesstype')),
            ],
            options={
                'db_table': 'business_and_type',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BusinessAccessibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_free', models.BooleanField(db_column='is_free')),
                ('is_accessible', models.BooleanField(db_column='is_accessible')),
                ('is_kosher', models.BooleanField(db_column='is_kosher')),
                ('is_baby_carriage', models.BooleanField(db_column='is_baby_carriage')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='take_me_app.business')),
            ],
            options={
                'db_table': 'business_accessibility',
            },
        ),
        migrations.AddField(
            model_name='business',
            name='business_types',
            field=models.ManyToManyField(through='take_me_app.BusinessAndType', to='take_me_app.businesstype'),
        ),
        migrations.AddField(
            model_name='business',
            name='users',
            field=models.ManyToManyField(related_name='business', through='take_me_app.BusinessAndUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='business',
            name='users_histories',
            field=models.ManyToManyField(related_name='business_histories', through='take_me_app.UserViewHistory', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='business',
            name='users_likes',
            field=models.ManyToManyField(related_name='business_likes', through='take_me_app.UserLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(db_column='city', db_index=True, max_length=256)),
                ('street', models.CharField(db_column='street', max_length=256)),
                ('number', models.SmallIntegerField(db_column='number')),
                ('zip_code', models.IntegerField(blank=True, db_column='zip_code', null=True)),
                ('floor', models.SmallIntegerField(blank=True, db_column='floor', null=True)),
                ('apartment_num', models.SmallIntegerField(blank=True, db_column='apartment_num', null=True)),
                ('is_business', models.BooleanField(db_column='is_business')),
                ('business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='take_me_app.business')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'address',
                'ordering': ['id'],
            },
        ),
    ]
